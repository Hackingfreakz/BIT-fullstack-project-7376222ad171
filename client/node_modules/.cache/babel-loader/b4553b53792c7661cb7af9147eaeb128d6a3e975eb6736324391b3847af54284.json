{"ast":null,"code":"var _jsxFileName = \"D:\\\\RP\\\\client\\\\src\\\\components\\\\GAuth.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { GoogleOAuthProvider, useGoogleLogin } from \"@react-oauth/google\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GAuth = () => {\n  _s();\n  const clientId = \"691701543397-gbptsop3a1t7b0j2b25djg67nae1rkik.apps.googleusercontent.com\";\n  const [user, setUser] = useState([]);\n  const [profile, setProfile] = useState([]);\n  const login = /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: clientId,\n    children: useGoogleLogin({\n      onSuccess: codeResponse => setUser(codeResponse),\n      onError: error => console.log('Login Failed:', error)\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 19\n  }, this);\n  useEffect(() => {\n    if (user) {\n      axios.get(`https://www.googleapis.com/oauth2/v1/userinfo?access_token=${user.access_token}`, {\n        headers: {\n          Authorization: `Bearer ${user.access_token}`,\n          Accept: 'application/json'\n        }\n      }).then(res => {\n        setProfile(res.data);\n      }).catch(err => console.log(err));\n    }\n  }, [user]);\n  console.log(profile);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => login(),\n      children: \"Sign in with Google \\uD83D\\uDE80 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 10\n    }, this)\n  }, void 0, false)\n  // <GoogleOAuthProvider \n  // style={{backgroundColor: '#f2f5f9'}}\n  //     clientId={clientId}>\n  //     <GoogleLogin\n  //         onSuccess={credentialResponse => {\n  //             console.log(credentialResponse);\n  //         }}\n  //         onError={() => {\n  //             console.log(\"Login Failed\");\n  //         }}\n  //     />\n  // </GoogleOAuthProvider>\n  ;\n};\n_s(GAuth, \"bHn9R8AZXZ+Qp31HpIqzHjkqnF4=\", false, function () {\n  return [useGoogleLogin];\n});\n_c = GAuth;\nexport default GAuth;\nvar _c;\n$RefreshReg$(_c, \"GAuth\");","map":{"version":3,"names":["React","useState","useEffect","GoogleOAuthProvider","useGoogleLogin","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","GAuth","_s","clientId","user","setUser","profile","setProfile","login","children","onSuccess","codeResponse","onError","error","console","log","fileName","_jsxFileName","lineNumber","columnNumber","get","access_token","headers","Authorization","Accept","then","res","data","catch","err","onClick","_c","$RefreshReg$"],"sources":["D:/RP/client/src/components/GAuth.js"],"sourcesContent":["import React ,{ useState, useEffect }from 'react'\r\nimport { GoogleOAuthProvider,useGoogleLogin } from \"@react-oauth/google\";\r\nimport axios from 'axios';\r\n\r\nconst GAuth = () => {\r\n    const clientId = \"691701543397-gbptsop3a1t7b0j2b25djg67nae1rkik.apps.googleusercontent.com\";\r\n    const [ user, setUser ] = useState([]);\r\n    const [ profile, setProfile ] = useState([]);\r\n    const login = <GoogleOAuthProvider \r\n    clientId={clientId}>\r\n        {useGoogleLogin({\r\n        onSuccess: (codeResponse) => setUser(codeResponse),\r\n        onError: (error) => console.log('Login Failed:', error)\r\n    })}</GoogleOAuthProvider>\r\n    \r\n    useEffect(\r\n        () => {\r\n            if (user) {\r\n                axios\r\n                    .get(`https://www.googleapis.com/oauth2/v1/userinfo?access_token=${user.access_token}`, {\r\n                        headers: {\r\n                            Authorization: `Bearer ${user.access_token}`,\r\n                            Accept: 'application/json'\r\n                        }\r\n                    })\r\n                    .then((res) => {\r\n                        setProfile(res.data);\r\n                    })\r\n                    .catch((err) => console.log(err));\r\n            }\r\n        },\r\n        [ user ]\r\n    );\r\n    console.log(profile);\r\n    return (\r\n       <><button onClick={() => login()}>Sign in with Google ðŸš€ </button></>\r\n        // <GoogleOAuthProvider \r\n        // style={{backgroundColor: '#f2f5f9'}}\r\n        //     clientId={clientId}>\r\n        //     <GoogleLogin\r\n        //         onSuccess={credentialResponse => {\r\n        //             console.log(credentialResponse);\r\n        //         }}\r\n        //         onError={() => {\r\n        //             console.log(\"Login Failed\");\r\n        //         }}\r\n        //     />\r\n        // </GoogleOAuthProvider>\r\n    );\r\n};\r\nexport default GAuth;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACjD,SAASC,mBAAmB,EAACC,cAAc,QAAQ,qBAAqB;AACxE,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAMC,QAAQ,GAAG,0EAA0E;EAC3F,MAAM,CAAEC,IAAI,EAAEC,OAAO,CAAE,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAEc,OAAO,EAAEC,UAAU,CAAE,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMgB,KAAK,gBAAGV,OAAA,CAACJ,mBAAmB;IAClCS,QAAQ,EAAEA,QAAS;IAAAM,QAAA,EACdd,cAAc,CAAC;MAChBe,SAAS,EAAGC,YAAY,IAAKN,OAAO,CAACM,YAAY,CAAC;MAClDC,OAAO,EAAGC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,KAAK;IAC1D,CAAC;EAAC;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAsB,CAAC;EAEzB1B,SAAS,CACL,MAAM;IACF,IAAIW,IAAI,EAAE;MACNR,KAAK,CACAwB,GAAG,CAAC,8DAA8DhB,IAAI,CAACiB,YAAY,EAAE,EAAE;QACpFC,OAAO,EAAE;UACLC,aAAa,EAAE,UAAUnB,IAAI,CAACiB,YAAY,EAAE;UAC5CG,MAAM,EAAE;QACZ;MACJ,CAAC,CAAC,CACDC,IAAI,CAAEC,GAAG,IAAK;QACXnB,UAAU,CAACmB,GAAG,CAACC,IAAI,CAAC;MACxB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKf,OAAO,CAACC,GAAG,CAACc,GAAG,CAAC,CAAC;IACzC;EACJ,CAAC,EACD,CAAEzB,IAAI,CACV,CAAC;EACDU,OAAO,CAACC,GAAG,CAACT,OAAO,CAAC;EACpB,oBACGR,OAAA,CAAAE,SAAA;IAAAS,QAAA,eAAEX,OAAA;MAAQgC,OAAO,EAAEA,CAAA,KAAMtB,KAAK,CAAC,CAAE;MAAAC,QAAA,EAAC;IAAuB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC,gBAAE;EACnE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAER,CAAC;AAACjB,EAAA,CA7CID,KAAK;EAAA,QAMFN,cAAc;AAAA;AAAAoC,EAAA,GANjB9B,KAAK;AA8CX,eAAeA,KAAK;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}